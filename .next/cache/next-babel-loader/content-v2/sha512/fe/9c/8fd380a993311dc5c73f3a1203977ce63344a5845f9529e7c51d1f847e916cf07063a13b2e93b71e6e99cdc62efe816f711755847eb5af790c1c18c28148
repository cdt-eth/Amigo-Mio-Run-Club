{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/christianturner/Dev/Personal/React/strava/stores/authContext.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport netlifyIdentity from \"netlify-identity-widget\"; // using global context to log in/out user anywhere in the app\n\nvar AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: function login() {},\n  logout: function logout() {},\n  authReady: false // false until user credentials has been validated\n\n});\nexport var AuthContextProvider = function AuthContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1];\n\n  useEffect(function () {\n    // init netlify identity connection\n    netlifyIdentity.init();\n  }, []); // fire function once because of []\n  // we just need once to verify user\n\n  var login = function login() {\n    // opens modal with signup/login form\n    netlifyIdentity.open();\n  };\n\n  var loginInfo = {\n    // user: user,\n    // login: login,\n    user: user,\n    login: login\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: user,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(AuthContextProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n\n_c = AuthContextProvider;\nexport default AuthContext; // create context with default state\n// create Provider function to keep track of passed-in values\n//          then pass anywhere via the \"returhned\" AuthContext.Provider\n//          our {children} is everything it wraps in \"_appjs\" which is:\n//                  <Layout>\n//                      <Component {...pageProps} />;\n//                  </Layout >\n//          our component will now receive the value via useContext\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/christianturner/Dev/Personal/React/strava/stores/authContext.js"],"names":["createContext","useState","useEffect","netlifyIdentity","AuthContext","user","login","logout","authReady","AuthContextProvider","children","setUser","init","open","loginInfo"],"mappings":";;;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,eAAP,MAA4B,yBAA5B,C,CAEA;;AACA,IAAMC,WAAW,gBAAGJ,aAAa,CAAC;AAChCK,EAAAA,IAAI,EAAE,IAD0B;AAEhCC,EAAAA,KAAK,EAAE,iBAAM,CAAE,CAFiB;AAGhCC,EAAAA,MAAM,EAAE,kBAAM,CAAE,CAHgB;AAIhCC,EAAAA,SAAS,EAAE,KAJqB,CAId;;AAJc,CAAD,CAAjC;AAOA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAC3BT,QAAQ,CAAC,IAAD,CADmB;AAAA,MAC5CI,IAD4C;AAAA,MACtCM,OADsC;;AAGnDT,EAAAA,SAAS,CAAC,YAAM;AACd;AACAC,IAAAA,eAAe,CAACS,IAAhB;AACD,GAHQ,EAGN,EAHM,CAAT,CAHmD,CAOnD;AACA;;AAEA,MAAMN,KAAK,GAAG,SAARA,KAAQ,GAAM;AAClB;AACAH,IAAAA,eAAe,CAACU,IAAhB;AACD,GAHD;;AAKA,MAAMC,SAAS,GAAG;AAChB;AACA;AACAT,IAAAA,IAAI,EAAJA,IAHgB;AAIhBC,IAAAA,KAAK,EAALA;AAJgB,GAAlB;AAOA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA,cAAoCK;AAApC;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CAvBM;;GAAMD,mB;;KAAAA,mB;AAyBb,eAAeL,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport netlifyIdentity from \"netlify-identity-widget\";\n\n// using global context to log in/out user anywhere in the app\nconst AuthContext = createContext({\n  user: null,\n  login: () => {},\n  logout: () => {},\n  authReady: false, // false until user credentials has been validated\n});\n\nexport const AuthContextProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // init netlify identity connection\n    netlifyIdentity.init();\n  }, []);\n  // fire function once because of []\n  // we just need once to verify user\n\n  const login = () => {\n    // opens modal with signup/login form\n    netlifyIdentity.open();\n  };\n\n  const loginInfo = {\n    // user: user,\n    // login: login,\n    user,\n    login,\n  };\n\n  return <AuthContext.Provider value={user}>{children}</AuthContext.Provider>;\n};\n\nexport default AuthContext;\n\n// create context with default state\n// create Provider function to keep track of passed-in values\n//          then pass anywhere via the \"returhned\" AuthContext.Provider\n//          our {children} is everything it wraps in \"_appjs\" which is:\n//                  <Layout>\n//                      <Component {...pageProps} />;\n//                  </Layout >\n//          our component will now receive the value via useContext\n"]},"metadata":{},"sourceType":"module"}