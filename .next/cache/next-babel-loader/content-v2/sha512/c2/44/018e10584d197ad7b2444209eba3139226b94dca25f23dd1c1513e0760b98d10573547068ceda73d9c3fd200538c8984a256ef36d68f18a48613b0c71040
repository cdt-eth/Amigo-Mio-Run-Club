{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useState, useEffect } from \"react\";\nimport netlifyIdentity from \"netlify-identity-widget\"; // using global context to log in/out user anywhere in the app\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: () => {},\n  logout: () => {},\n  authReady: false // false until user credentials has been validated\n\n});\nexport const AuthContextProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  useEffect(() => {\n    //   login event listener\n    netlifyIdentity.on(\"login\", user => {\n      setUser(user);\n      netlifyIdentity.close();\n      console.log(\"login event\");\n    }); // init netlify identity connection\n\n    netlifyIdentity.init();\n  }, []); // fire function once because of []\n  // we just need once to verify user\n\n  const login = () => {\n    // opens modal with signup/login form\n    netlifyIdentity.open();\n  };\n\n  const loginInfo = {\n    // user: user,\n    // login: login,\n    user,\n    login // since both property & value pairs are the same, we don't have to repeat the name\n\n  };\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: loginInfo,\n    children: children\n  });\n};\nexport default AuthContext; // create context with default state\n// create Provider function to keep track of passed-in values\n//          then pass anywhere via the \"returhned\" AuthContext.Provider\n//          our {children} is everything it wraps in \"_appjs\" which is:\n//                  <Layout>\n//                      <Component {...pageProps} />;\n//                  </Layout >\n//          our component will now receive the value via useContext","map":null,"metadata":{},"sourceType":"module"}