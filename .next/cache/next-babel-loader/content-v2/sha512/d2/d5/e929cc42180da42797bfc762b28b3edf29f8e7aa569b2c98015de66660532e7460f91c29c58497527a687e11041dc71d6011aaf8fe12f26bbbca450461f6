{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/christianturner/Dev/Personal/React/strava/stores/authContext.js\";\nimport { createContext, useState, useEffect } from \"react\";\nimport netlifyIdentity from \"netlify-identity-widget\"; // using global context to log in/out user anywhere in the app\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: () => {},\n  logout: () => {},\n  authReady: false // false until user credentials has been validated\n\n});\nexport const AuthContextProvider = ({\n  children\n}) => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n  useEffect(() => {\n    //   login event listener\n    netlifyIdentity.on(\"login\", user => {\n      setUser({\n        user\n      });\n      netlifyIdentity.close();\n      console.log(\"login event\");\n    }); // init netlify identity connection\n\n    netlifyIdentity.init();\n  }, []); // fire function once because of []\n  // we just need once to verify user\n\n  const login = () => {\n    // opens modal with signup/login form\n    netlifyIdentity.open();\n  };\n\n  const loginInfo = {\n    // user: user,\n    // login: login,\n    user,\n    login // since both property & value pairs are the same, we don't have to repeat the name\n\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: loginInfo,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\nexport default AuthContext; // create context with default state\n// create Provider function to keep track of passed-in values\n//          then pass anywhere via the \"returhned\" AuthContext.Provider\n//          our {children} is everything it wraps in \"_appjs\" which is:\n//                  <Layout>\n//                      <Component {...pageProps} />;\n//                  </Layout >\n//          our component will now receive the value via useContext","map":{"version":3,"sources":["/Users/christianturner/Dev/Personal/React/strava/stores/authContext.js"],"names":["createContext","useState","useEffect","netlifyIdentity","AuthContext","user","login","logout","authReady","AuthContextProvider","children","setUser","on","close","console","log","init","open","loginInfo"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,eAAP,MAA4B,yBAA5B,C,CAEA;;AACA,MAAMC,WAAW,gBAAGJ,aAAa,CAAC;AAChCK,EAAAA,IAAI,EAAE,IAD0B;AAEhCC,EAAAA,KAAK,EAAE,MAAM,CAAE,CAFiB;AAGhCC,EAAAA,MAAM,EAAE,MAAM,CAAE,CAHgB;AAIhCC,EAAAA,SAAS,EAAE,KAJqB,CAId;;AAJc,CAAD,CAAjC;AAOA,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACnD,QAAM;AAAA,OAACL,IAAD;AAAA,OAAOM;AAAP,MAAkBV,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAC,IAAAA,eAAe,CAACS,EAAhB,CAAmB,OAAnB,EAA6BP,IAAD,IAAU;AACpCM,MAAAA,OAAO,CAAC;AAAEN,QAAAA;AAAF,OAAD,CAAP;AACAF,MAAAA,eAAe,CAACU,KAAhB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KALD,EAFc,CASd;;AACAZ,IAAAA,eAAe,CAACa,IAAhB;AACD,GAXQ,EAWN,EAXM,CAAT,CAHmD,CAenD;AACA;;AAEA,QAAMV,KAAK,GAAG,MAAM;AAClB;AACAH,IAAAA,eAAe,CAACc,IAAhB;AACD,GAHD;;AAKA,QAAMC,SAAS,GAAG;AAChB;AACA;AACAb,IAAAA,IAHgB;AAIhBC,IAAAA,KAJgB,CAKhB;;AALgB,GAAlB;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEY,SAA7B;AAAA,cAAyCR;AAAzC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAlCM;AAoCP,eAAeN,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport netlifyIdentity from \"netlify-identity-widget\";\n\n// using global context to log in/out user anywhere in the app\nconst AuthContext = createContext({\n  user: null,\n  login: () => {},\n  logout: () => {},\n  authReady: false, // false until user credentials has been validated\n});\n\nexport const AuthContextProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    //   login event listener\n    netlifyIdentity.on(\"login\", (user) => {\n      setUser({ user });\n      netlifyIdentity.close();\n\n      console.log(\"login event\");\n    });\n\n    // init netlify identity connection\n    netlifyIdentity.init();\n  }, []);\n  // fire function once because of []\n  // we just need once to verify user\n\n  const login = () => {\n    // opens modal with signup/login form\n    netlifyIdentity.open();\n  };\n\n  const loginInfo = {\n    // user: user,\n    // login: login,\n    user,\n    login,\n    // since both property & value pairs are the same, we don't have to repeat the name\n  };\n\n  return (\n    <AuthContext.Provider value={loginInfo}>{children}</AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n\n// create context with default state\n// create Provider function to keep track of passed-in values\n//          then pass anywhere via the \"returhned\" AuthContext.Provider\n//          our {children} is everything it wraps in \"_appjs\" which is:\n//                  <Layout>\n//                      <Component {...pageProps} />;\n//                  </Layout >\n//          our component will now receive the value via useContext\n"]},"metadata":{},"sourceType":"module"}